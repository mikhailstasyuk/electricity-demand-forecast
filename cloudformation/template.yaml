AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 key pair.

  myBucketName:
    Description: Name of an S3 bucket
    Type: String
    ConstraintDescription: 'Must be unique globally.'

  myInstanceType:
    Description: Type of an EC2 instance
    Type: String

  myImageId:
    Description: ID of a Amazon Machine Image to use
    Type: String

  dbMasterUsername:
    Description: DB username
    Type: String

  dbMasterUserPassword:
    Description: DB password
    Type: String

  myImageUri:
    Description: ECR container image URI for the Lambda function
    Type: String

Resources:
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref myBucketName

  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource: 
              - !Sub 'arn:aws:s3:::${myBucketName}/*'
              - !Sub 'arn:aws:s3:::${myBucketName}'

  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  MySubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'

  MySubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1b'

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for EC2 instance'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for RDS instance'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref myInstanceType
      ImageId: !Ref myImageId
      KeyName: 
        Ref: 'KeyPairName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: 
            Ref: 'MySubnetA'
          GroupSet:
            - Ref: 'EC2SecurityGroup'
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"   
          Ebs:
            VolumeSize: 15  
            DeleteOnTermination: true  

  RDSDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS'
      SubnetIds:
        - !Ref MySubnetA
        - !Ref MySubnetB

  MyRDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'postgres'
      MasterUsername: !Ref dbMasterUsername
      MasterUserPassword: !Ref dbMasterUserPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  MySubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MySubnetA

  MySubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref MySubnetB

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group with no ingress rule'
      VpcId: !Ref MyVPC

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
      - PolicyName: LambdaS3RDSAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            Resource: 
              - !Sub 'arn:aws:s3:::${myBucketName}/*'
              - !Sub 'arn:aws:s3:::${myBucketName}'
          - Effect: Allow
            Action:
            - rds:DescribeDBInstances
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            Resource: "*"

  RDSSecurityGroupIngressForLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: '5432'
      ToPort: '5432'
      SourceSecurityGroupId: !GetAtt [LambdaSecurityGroup, GroupId]

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda'
      VpcId: !Ref MyVPC

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Ref myImageUri  
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref MySubnetA
          - !Ref MySubnetB

Outputs:
  EC2InstanceId:
    Description: "ID of the created EC2 instance"
    Value: !Ref MyEC2Instance

  RDSInstanceEndpoint:
    Description: "Endpoint of the created RDS instance"
    Value: !GetAtt MyRDSInstance.Endpoint.Address